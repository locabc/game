// H√†m ƒë·ªÉ m·ªü game t·ª´ file lat_the.html khi nh·∫≠n GiftBox
export function createGiftBoxMiniGame(scene) {
    // T·∫°m d·ª´ng tr√≤ ch∆°i ch√≠nh
    if (scene.timerEvent) scene.timerEvent.paused = true;
    scene.isImageOpen = true;
    
    // Random ch·ªçn 1 trong 3 game: l·∫≠t th·∫ª, ƒë·ªë vui, t√≠nh to√°n
    const games = ['lat_the.html', 'do_vui.html', 'tinh_toan.html'];
    const randomGame = games[Math.floor(Math.random() * games.length)];
    
    //console.log('üéÆ Random game selected:', randomGame);
    
    // T·∫°o hi·ªáu ·ª©ng t·ªëi n·ªÅn ƒë·ªÉ hi·ªÉn th·ªã tr√≤ ch∆°i
    const width = scene.cameras.main.width;
    const height = scene.cameras.main.height;
    const overlay = scene.add.rectangle(width / 2, height / 2, width, height, 0x000000, 0.7);
    overlay.setDepth(1000);
    overlay.setScrollFactor(0);
    
    // L∆∞u overlay ƒë·ªÉ c√≥ th·ªÉ x√≥a sau n√†y
    window.currentGameOverlay = overlay;
    
    // T·∫°o m·ªôt HTML iframe element ƒë·ªÉ hi·ªÉn th·ªã game ƒë∆∞·ª£c ch·ªçn
    const iframeElement = document.createElement('iframe');
    iframeElement.style.position = 'fixed';
    iframeElement.style.top = '50%';
    iframeElement.style.left = '50%';
    iframeElement.style.transform = 'translate(-50%, -50%)';
    iframeElement.style.width = '98%';
    iframeElement.style.height = '98%';
    iframeElement.style.border = 'none';
    iframeElement.style.zIndex = '1001';
    iframeElement.style.borderRadius = '10px';
    iframeElement.style.boxShadow = '0 0 20px rgba(0, 0, 0, 0.5)';
    iframeElement.style.overflow = 'hidden';
    iframeElement.style.backgroundColor = '#1a202c';
    
    // T·∫°o URL v·ªõi tham s·ªë ƒë·ªÉ ƒë·∫£m b·∫£o iframe load v·ªõi CSS ƒë√∫ng
    const iframeUrl = new URL(randomGame, window.location.href);
    iframeUrl.searchParams.set('embedded', 'true');
    iframeElement.src = iframeUrl.toString();
    
    // Th√™m iframe v√†o DOM
    document.body.appendChild(iframeElement);
    
    // T·∫°o n√∫t ƒë√≥ng HTML ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ quay l·∫°i game
    const htmlCloseButton = document.createElement('button');
    htmlCloseButton.textContent = 'X';
    htmlCloseButton.style.position = 'fixed';
    htmlCloseButton.style.top = '5%';
    htmlCloseButton.style.right = '5%';
    htmlCloseButton.style.zIndex = '1002';
    htmlCloseButton.style.backgroundColor = '#ff0000';
    htmlCloseButton.style.color = 'white';
    htmlCloseButton.style.border = 'none';
    htmlCloseButton.style.borderRadius = '50%';
    htmlCloseButton.style.width = '40px';
    htmlCloseButton.style.height = '40px';
    htmlCloseButton.style.fontSize = '20px';
    htmlCloseButton.style.cursor = 'pointer';
    htmlCloseButton.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
    
    document.body.appendChild(htmlCloseButton);
    
    // Create a named function handler to allow for proper cleanup
    const messageHandler = function(event) {
        // Ki·ªÉm tra th√¥ng ƒëi·ªáp t·ª´ game ƒë·ªë vui v√† t√≠nh to√°n
        if (event.data && event.data.type === 'quizGameCompleted') {
            const result = event.data.result;
            const correctAnswers = result.correctAnswers;
            
            //console.log('üß† Quiz game completed with', correctAnswers, 'correct answers');
            
            // X·ª≠ l√Ω ph·∫ßn th∆∞·ªüng d·ª±a tr√™n s·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng
            let rewardText = '';
            let rewardMoney = 0;
            let rewardDynamite = 0;
            let rewardFreeze = 0;
            
            if (correctAnswers === 5) {
                // üéâ Ho√†n h·∫£o - 5/5 c√¢u
                rewardMoney = 5000;
                rewardDynamite = 4;
                rewardFreeze = 4;
                rewardText = `ÔøΩ XU·∫§T S·∫ÆC! Tr·∫£ l·ªùi ƒë√∫ng 5/5 c√¢u!\nüí∞ +${rewardMoney} GOLD\nüí£ +${rewardDynamite} Thu·ªëc n·ªï\n‚ùÑÔ∏è +${rewardFreeze} ƒê√≥ng bƒÉng`;
            } else if (correctAnswers === 4) {
                // ‚ùÑÔ∏è T·ªët - 4/5 c√¢u: Gold + ƒê√≥ng bƒÉng
                rewardMoney = 3000;
                rewardFreeze = 3;
                rewardText = `üéØ Tr·∫£ l·ªùi ƒë√∫ng ${correctAnswers}/5 c√¢u!\nüí∞ +${rewardMoney} GOLD\n‚ùÑÔ∏è +${rewardFreeze} ƒê√≥ng bƒÉng`;
            } else if (correctAnswers === 3) {
                // üí£ Kh√° - 3/5 c√¢u: Gold + Thu·ªëc n·ªï
                rewardMoney = 2000;
                rewardDynamite = 2;
                rewardText = `üéØ Tr·∫£ l·ªùi ƒë√∫ng ${correctAnswers}/5 c√¢u!\nüí∞ +${rewardMoney} GOLD\nüí£ +${rewardDynamite} Thu·ªëc n·ªï`;
            } else if (correctAnswers === 2) {
                // üí∞ ƒê·∫°t - 2/5 c√¢u: Ch·ªâ Gold
                rewardMoney = 1000;
                rewardText = `ÔøΩ Tr·∫£ l·ªùi ƒë√∫ng ${correctAnswers}/5 c√¢u!\nüí∞ +${rewardMoney} GOLD`;
            } else {
                // üò¢ Ch∆∞a ƒë·∫°t - 0-1 c√¢u: Kh√¥ng c√≥ g√¨
                rewardText = `üò¢ Tr·∫£ l·ªùi ƒë√∫ng ${correctAnswers}/5 c√¢u!\nüéØ C·∫ßn t·ªëi thi·ªÉu 2 c√¢u ƒë√∫ng ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng`;
            }
            
            // √Åp d·ª•ng ph·∫ßn th∆∞·ªüng
            if (rewardMoney > 0) {
                scene.player.money += rewardMoney;
                scene.moneyText.setText('$' + scene.player.money);
            }
            if (rewardDynamite > 0) {
                // S·ª≠ d·ª•ng addDynamite ƒë·ªÉ ƒë·∫£m b·∫£o consistency
                scene.player.addDynamite(rewardDynamite);
            }
            if (rewardFreeze > 0) {
                // S·ª≠ d·ª•ng addTimeFreezeItem ƒë·ªÉ ƒë·∫£m b·∫£o consistency
                scene.player.addTimeFreezeItem(rewardFreeze);
            }
            
            // QUAN TR·ªåNG: L∆∞u ti·∫øn tr√¨nh ngay l·∫≠p t·ª©c sau khi nh·∫≠n ph·∫ßn th∆∞·ªüng
            if (scene.player.saveProgress) {
                scene.player.saveProgress();
            }
            
            // C·∫≠p nh·∫≠t UI
            if (scene.updatePlayerStats) scene.updatePlayerStats();
            
            // G·ª≠i th√¥ng b√°o ph·∫ßn th∆∞·ªüng v·ªÅ game quiz ƒë·ªÉ hi·ªÉn th·ªã (v·ªõi delay ƒë·ªÉ ƒë·∫£m b·∫£o UI s·∫µn s√†ng)
            setTimeout(() => {
                if (window.frames.length > 0) {
                    try {
                        const iframe = document.querySelector('iframe');
                        if (iframe && iframe.contentWindow) {
                            //console.log('üéÅ Sending reward message to iframe:', rewardText);
                            iframe.contentWindow.postMessage({
                                type: 'showReward',
                                reward: {
                                    text: rewardText,
                                    money: rewardMoney,
                                    dynamite: rewardDynamite,
                                    freeze: rewardFreeze
                                }
                            }, '*');
                        }
                    } catch (error) {
                        console.warn('Could not send reward message to iframe:', error);
                    }
                }
            }, 500); // Delay 500ms ƒë·ªÉ UI quiz s·∫µn s√†ng
            
            // ƒê√≥ng iframe sau khi hi·ªÉn th·ªã th√¥ng b√°o
            setTimeout(() => {
                try {
                    const iframe = document.querySelector('iframe');
                    const closeButton = document.querySelector('button');
                    
                    if (iframe) {
                        document.body.removeChild(iframe);
                    }
                    if (closeButton && closeButton.textContent === 'X') {
                        document.body.removeChild(closeButton);
                    }
                    
                    window.removeEventListener('message', messageHandler);
                    
                    if (scene.timerEvent) scene.timerEvent.paused = false;
                    scene.isImageOpen = false;
                    
                    // X√≥a overlay ƒë√∫ng c√°ch
                    if (window.currentGameOverlay) {
                        window.currentGameOverlay.destroy();
                        window.currentGameOverlay = null;
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è Quiz cleanup warning:', error);
                }
            }, 5000); // TƒÉng t·ª´ 3000 l√™n 5000ms
            
            return;
        }
        
        // Ki·ªÉm tra th√¥ng ƒëi·ªáp ƒë√≥ng game t·ª´ quiz/math games
        if (event.data && event.data.type === 'closeGame') {
            try {
                const iframe = document.querySelector('iframe');
                const closeButton = document.querySelector('button');
                
                if (iframe) {
                    document.body.removeChild(iframe);
                }
                if (closeButton && closeButton.textContent === 'X') {
                    document.body.removeChild(closeButton);
                }
                
                window.removeEventListener('message', messageHandler);
                
                if (scene.timerEvent) scene.timerEvent.paused = false;
                scene.isImageOpen = false;
                
                // X√≥a overlay ƒë√∫ng c√°ch
                if (window.currentGameOverlay) {
                    window.currentGameOverlay.destroy();
                    window.currentGameOverlay = null;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Close game cleanup warning:', error);
            }
            
            return;
        }
        
        // Ki·ªÉm tra th√¥ng ƒëi·ªáp t·ª´ iframe lat_the.html
        if (event.data && event.data.type === 'cardGameCompleted') {
            const reward = event.data.reward;
            
            // Debug logging
            // console.log('üéÆ GiftGame nh·∫≠n ƒë∆∞·ª£c reward:', JSON.stringify(reward));
            
            // X·ª≠ l√Ω ph·∫ßn th∆∞·ªüng d·ª±a tr√™n k·∫øt qu·∫£ t·ª´ game l·∫≠t th·∫ª
            if (reward) {
                // console.log('üéØ X·ª≠ l√Ω reward type:', reward.type);
                switch (reward.type) {
                    case 'money':
                        scene.player.money += reward.value;
                        scene.moneyText.setText('$' + scene.player.money);
                        
                        // Hi·ªÉn th·ªã th√¥ng b√°o
                        const moneyRewardText = scene.add.text(scene.cameras.main.centerX, 60, `üí∞ +${reward.value} Ti·ªÅn`, {
                            fontFamily: 'Arial',
                            fontSize: '16px',
                            fill: '#FFD700',
                            stroke: '#000000',
                            strokeThickness: 2
                        }).setOrigin(0.5);
                        
                        scene.tweens.add({
                            targets: moneyRewardText,
                            alpha: 0,
                            y: 30,
                            duration: 2000,
                            onComplete: () => moneyRewardText.destroy()
                        });
                        break;
                        
                    case 'dynamite':
                        // S·ª≠ d·ª•ng addDynamite ƒë·ªÉ ƒë·∫£m b·∫£o consistency
                        scene.player.addDynamite(reward.value);
                        if (scene.updatePlayerStats) scene.updatePlayerStats();
                        
                        // L∆∞u progress ngay sau khi nh·∫≠n dynamite
                        if (scene.player.saveProgress) {
                            scene.player.saveProgress();
                        }
                        
                        // Hi·ªÉn th·ªã th√¥ng b√°o
                        const dynamiteText = scene.add.text(scene.cameras.main.centerX, 60, `üí£ +${reward.value} Thu·ªëc N·ªï`, {
                            fontFamily: 'Arial',
                            fontSize: '16px',
                            fill: '#FF6B35',
                            stroke: '#000000',
                            strokeThickness: 2
                        }).setOrigin(0.5);
                        
                        scene.tweens.add({
                            targets: dynamiteText,
                            alpha: 0,
                            y: 30,
                            duration: 2000,
                            onComplete: () => dynamiteText.destroy()
                        });
                        break;
                        
                    case 'time':
                        scene.timeLeft += reward.value;
                        scene.timeText.setText('Time: ' + scene.timeLeft);
                        
                        // Hi·ªÉn th·ªã th√¥ng b√°o
                        const timeText = scene.add.text(scene.cameras.main.centerX, 60, `‚è∞ +${reward.value} Gi√¢y`, {
                            fontFamily: 'Arial',
                            fontSize: '16px',
                            fill: '#4CAF50',
                            stroke: '#000000',
                            strokeThickness: 2
                        }).setOrigin(0.5);
                        
                        scene.tweens.add({
                            targets: timeText,
                            alpha: 0,
                            y: 30,
                            duration: 2000,
                            onComplete: () => timeText.destroy()
                        });
                        break;
                        
                    case 'freeze':
                        // S·ª≠ d·ª•ng addTimeFreezeItem ƒë·ªÉ ƒë·∫£m b·∫£o consistency
                        scene.player.addTimeFreezeItem(reward.value);
                        if (scene.updatePlayerStats) scene.updatePlayerStats();
                        
                        // L∆∞u progress ngay sau khi nh·∫≠n freeze
                        if (scene.player.saveProgress) {
                            scene.player.saveProgress();
                        }
                        
                        // Hi·ªÉn th·ªã th√¥ng b√°o
                        const freezeText = scene.add.text(scene.cameras.main.centerX, 60, `‚ùÑÔ∏è +${reward.value} ƒê√≥ng BƒÉng`, {
                            fontFamily: 'Arial',
                            fontSize: '16px',
                            fill: '#00BCD4',
                            stroke: '#000000',
                            strokeThickness: 2
                        }).setOrigin(0.5);
                        
                        scene.tweens.add({
                            targets: freezeText,
                            alpha: 0,
                            y: 30,
                            duration: 2000,
                            onComplete: () => freezeText.destroy()
                        });
                        break;
                        
                    case 'special_prize':
                        // X·ª≠ l√Ω gi·∫£i ƒë·∫∑c bi·ªát: C·ªông ti·ªÅn v√† chuy·ªÉn level
                        scene.player.money += reward.gold || 5000;
                        scene.moneyText.setText('$' + scene.player.money);
                        
                        // Debug th√¥ng tin scene
                        // console.log('üîç Scene info:', {
                        //     key: scene.scene?.key,
                        //     hasCompleteLevel: typeof scene.completeLevel === 'function',
                        //     hasSceneManager: !!scene.scene,
                        //     hasEvents: !!scene.events,
                        //     hasRegistry: !!scene.registry,
                        //     hasPlayer: !!scene.player,
                        //     playerHasGoToNextLevel: scene.player && typeof scene.player.goToNextLevel === 'function'
                        // });
                        
                        // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫∑c bi·ªát
                        const specialText = scene.add.text(scene.cameras.main.centerX, 60, `üéâ GI·∫¢I ƒê·∫∂C BI·ªÜT!\nüí∞ +${reward.gold || 5000} GOLD\nüöÄ Chuy·ªÉn level ti·∫øp theo!`, {
                            fontFamily: 'Arial',
                            fontSize: '18px',
                            fill: '#FFD700',
                            stroke: '#000000',
                            strokeThickness: 3,
                            align: 'center'
                        }).setOrigin(0.5);
                        
                        // Animation n·ªïi b·∫≠t cho th√¥ng b√°o
                        scene.tweens.add({
                            targets: specialText,
                            scaleX: 1.2,
                            scaleY: 1.2,
                            alpha: 0,
                            y: 30,
                            duration: 4000,
                            ease: 'Power2',
                            onComplete: () => specialText.destroy()
                        });
                        
                        // Chuy·ªÉn t·ªõi m√†n ch∆°i ti·∫øp theo sau 2 gi√¢y
                        setTimeout(() => {
                            // console.log('üéØ ƒêang th·ª≠ chuy·ªÉn m√†n...');
                            
                            // Cleanup v√† ƒë√≥ng iframe tr∆∞·ªõc khi chuy·ªÉn scene
                            try {
                                // T√¨m v√† ƒë√≥ng iframe + button
                                const iframe = document.querySelector('iframe');
                                const closeButton = document.querySelector('button');
                                
                                if (iframe) {
                                    // console.log('üßπ ƒê√≥ng iframe tr∆∞·ªõc khi chuy·ªÉn scene...');
                                    document.body.removeChild(iframe);
                                }
                                
                                if (closeButton && closeButton.textContent === 'X') {
                                    document.body.removeChild(closeButton);
                                }
                                
                                // Remove event listener
                                window.removeEventListener('message', messageHandler);
                                
                                // Resume game
                                if (scene.timerEvent) scene.timerEvent.paused = false;
                                scene.isImageOpen = false;
                                
                                // Destroy overlay if exists
                                // X√≥a overlay ƒë√∫ng c√°ch
                                if (window.currentGameOverlay) {
                                    window.currentGameOverlay.destroy();
                                    window.currentGameOverlay = null;
                                }
                                
                            } catch (cleanupError) {
                                console.warn('‚ö†Ô∏è Cleanup warning:', cleanupError);
                            }
                            
                            // Delay th√™m m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o cleanup ho√†n t·∫•t
                            setTimeout(() => {
                                // Chuy·ªÉn level theo c√°ch c·ªßa game
                                try {
                                    // S·ª≠ d·ª•ng MadeGoal nh∆∞ng ph·∫£i tƒÉng level tr∆∞·ªõc
                                    // console.log('üéØ TƒÉng level tr∆∞·ªõc khi chuy·ªÉn TransitionScene...');
                                    // console.log('üîç Current player level tr∆∞·ªõc khi tƒÉng:', scene.player.level);
                                    // console.log('üîç Current player realLevelStr tr∆∞·ªõc:', scene.player.realLevelStr);
                                    
                                    // TƒÉng level gi·ªëng nh∆∞ trong endLevel()
                                    if (scene.player && scene.player.goToNextLevel) {
                                        scene.player.goToNextLevel();
                                        // console.log('‚úÖ ƒê√£ tƒÉng level th√†nh:', scene.player.level);
                                        // console.log('‚úÖ RealLevelStr m·ªõi:', scene.player.realLevelStr);
                                        
                                        // L∆∞u progress
                                        if (scene.player.saveProgress) {
                                            scene.player.saveProgress();
                                        }
                                    }
                                    
                                    // Chuy·ªÉn th·∫≥ng ƒë·∫øn c·ª≠a h√†ng thay v√¨ TransitionScene
                                    // console.log('üéØ Chuy·ªÉn th·∫≥ng ƒë·∫øn ShopScene...');
                                    
                                    // ƒê·∫£m b·∫£o scene hi·ªán t·∫°i v·∫´n active tr∆∞·ªõc khi chuy·ªÉn
                                    if (scene.scene && scene.scene.isActive()) {
                                        scene.scene.start('ShopScene', { 
                                            player: scene.player 
                                        });
                                    } else {
                                        console.warn('‚ö†Ô∏è Scene kh√¥ng active, th·ª≠ restart game...');
                                        // Fallback: restart to√†n b·ªô game
                                        window.location.reload();
                                    }
                                } catch (error) {
                                    console.error('‚ùå L·ªói khi chuy·ªÉn m√†n:', error);
                                    console.error('Error details:', error.stack);
                                    
                                    // Fallback: th·ª≠ c√°ch kh√°c - restart PlayScene v·ªõi player hi·ªán t·∫°i
                                    // console.log('üîÑ Fallback: restart PlayScene...');
                                    try {
                                        if (scene.scene && scene.scene.isActive()) {
                                            scene.scene.start('PlayScene', { player: scene.player });
                                        } else {
                                            console.error('‚ö†Ô∏è Scene kh√¥ng active trong fallback, reload page...');
                                            window.location.reload();
                                        }
                                    } catch (fallbackError) {
                                        console.error('‚ùå Fallback c≈©ng l·ªói, reload page:', fallbackError);
                                        window.location.reload();
                                    }
                                }
                            }, 100);
                        }, 2000);
                        break;
                        
                    case 'next_level':
                        // Chuy·ªÉn t·ªõi m√†n ch∆°i ti·∫øp theo
                        if (scene.completeLevel) {
                            scene.completeLevel(true); // Truy·ªÅn true ƒë·ªÉ b·ªè qua animation v√† chuy·ªÉn ngay
                        } else {
                            // N·∫øu kh√¥ng c√≥ h√†m ho√†n th√†nh level, tƒÉng ƒëi·ªÉm v√† ghi nh·∫≠n ho√†n th√†nh level
                            scene.player.money += 500; // Th∆∞·ªüng ti·ªÅn khi chuy·ªÉn level
                            scene.moneyText.setText('$' + scene.player.money);
                            scene.events.emit('levelCompleted');
                        }
                        break;
                        
                    case 'close':
                        // Kh√¥ng c·∫ßn l√†m g√¨, ch·ªâ ƒë·ªÉ ƒë√≥ng mini-game
                        break;
                        
                    case 'image':
                        // Kh√¥ng c·∫ßn l√†m g√¨ ƒë·∫∑c bi·ªát, h√¨nh ·∫£nh ƒë√£ hi·ªÉn th·ªã trong iframe
                        break;
                }
            }
        }
    };
    
    // Add the event listener with our named handler
    window.addEventListener('message', messageHandler);
    
    // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng game
    htmlCloseButton.addEventListener('click', function() {
        try {
            // X√≥a iframe v√† button kh·ªèi DOM
            if (iframeElement.parentNode) {
                document.body.removeChild(iframeElement);
            }
            if (htmlCloseButton.parentNode) {
                document.body.removeChild(htmlCloseButton);
            }
            
            // Remove the message event listener
            window.removeEventListener('message', messageHandler);
            
            // Ti·∫øp t·ª•c tr√≤ ch∆°i ch√≠nh
            if (scene.timerEvent) scene.timerEvent.paused = false;
            scene.isImageOpen = false;
            
            // QUAN TR·ªåNG: X√≥a overlay ƒë·ªÉ t·∫Øt hi·ªáu ·ª©ng t·ªëi m√†n h√¨nh
            if (window.currentGameOverlay) {
                window.currentGameOverlay.destroy();
                window.currentGameOverlay = null;
            }
            
            // Th√™m ph·∫ßn th∆∞·ªüng nh·ªè khi ƒë√≥ng s·ªõm
            scene.player.money += 50;
            scene.moneyText.setText('$' + scene.player.money);
            
            // L∆∞u progress sau khi th√™m ti·ªÅn
            if (scene.player.saveProgress) {
                scene.player.saveProgress();
            }
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        const smallReward = scene.add.text(scene.cameras.main.centerX, 60, "üí∞ +50 Ti·ªÅn", {
            fontFamily: 'Arial',
            fontSize: '16px',
            fill: '#FFD700',
            stroke: '#000000',
            strokeThickness: 2
        }).setOrigin(0.5);
        
        // Animation cho th√¥ng b√°o
        scene.tweens.add({
            targets: smallReward,
            alpha: 0,
            y: 30,
            duration: 2000,
            onComplete: () => smallReward.destroy()
        });
        
        // X√≥a overlay
        if (window.currentGameOverlay) {
            window.currentGameOverlay.destroy();
            window.currentGameOverlay = null;
        }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error closing gift game:', error);
            // V·∫´n c·ªë g·∫Øng kh√¥i ph·ª•c game state
            if (scene.timerEvent) scene.timerEvent.paused = false;
            scene.isImageOpen = false;
            if (window.currentGameOverlay) {
                window.currentGameOverlay.destroy();
                window.currentGameOverlay = null;
            }
        }
    });
    
    // L·∫Øng nghe s·ª± ki·ªán ƒë√≥ng iframe ngay l·∫≠p t·ª©c
    window.addEventListener('closeIframe', function() {
        // X√≥a iframe v√† button kh·ªèi DOM
        document.body.removeChild(iframeElement);
        document.body.removeChild(htmlCloseButton);
        
        // Ti·∫øp t·ª•c tr√≤ ch∆°i ch√≠nh
        if (scene.timerEvent) scene.timerEvent.paused = false;
        scene.isImageOpen = false;
        
        // X√≥a overlay
        if (window.currentGameOverlay) {
            window.currentGameOverlay.destroy();
            window.currentGameOverlay = null;
        }
        
        // X√≥a event listener
        window.removeEventListener('message', messageHandler);
    });
}
