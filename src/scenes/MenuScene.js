import Player from '../entities/Player.js';
export default class MenuScene extends Phaser.Scene {
    constructor() {
        super({ key: 'MenuScene' });
        
        // C√°c l·ª±a ch·ªçn trong menu
        this.options = [
            { text: 'B·∫Øt ƒê·∫ßu', scene: 'TransitionScene', data: { type: 'NextGoal' } },
            { text: 'ƒêi·ªÉm Cao', scene: 'HighScoreScene', data: null }
        ];
        this.selectedIndex = 0;
        this.textObjects = []; // Array to store text objects for interactivity
    }

    create() {
        // ‚úÖ Resume audio context when entering menu
        if (window.audioManager) {
            window.audioManager.forceResumeAudio();
        }

        // V·∫Ω n·ªÅn v√† ti√™u ƒë·ªÅ game (n·∫øu c√≥)
        this.add.image(0, 0, 'Menu').setOrigin(0);
        this.add.image(this.cameras.main.centerX, 20, 'Title').setOrigin(0.5, 0);

        // T·∫°o c√°c l·ª±a ch·ªçn menu d∆∞·ªõi d·∫°ng text object
        this.options.forEach((option, index) => {
            const y = 150 + index * 20;
            const text = this.add.text(30, y, option.text, { 
                fontFamily: 'Kurland',
                fontSize: '20px', 
                fill: '#ffda21'
            }).setInteractive(); // Make text clickable

            // Store text object for later use
            this.textObjects.push(text);

            // Add hover effect
            text.on('pointerover', () => {
                this.selectedIndex = index;
                this.arrow.y = 152 + index * 20;
                text.setStyle({ fill: '#ffffff' }); // Change color on hover
            });

            text.on('pointerout', () => {
                text.setStyle({ fill: '#ffda21' }); // Revert color
            });

            // Handle click event
            text.on('pointerdown', () => {
                this.selectedIndex = index;
                this.selectOption();
            });
        });

        // T·∫°o m≈©i t√™n ch·ªâ th·ªã
        this.arrow = this.add.image(15, 152, 'MenuArrow').setOrigin(0.5, 0);

        // L·∫Øng nghe s·ª± ki·ªán b√†n ph√≠m
        this.input.keyboard.on('keydown-UP', () => this.moveSelection(-1), this);
        this.input.keyboard.on('keydown-DOWN', () => this.moveSelection(1), this);
        this.input.keyboard.on('keydown-ENTER', this.selectOption, this);
        this.input.keyboard.on('keydown-SPACE', this.selectOption, this);
        
        // Th√™m n√∫t b·∫≠t √¢m thanh
        const audioButton = this.add.text(this.cameras.main.centerX, 210, 'Nh·∫•n ƒë·ªÉ b·∫≠t √¢m thanh üîä', {
            fontFamily: 'Kurland',
            fontSize: '14px',
            fill: '#ffaa00',
            align: 'center'
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });

        audioButton.on('pointerdown', () => {
            if (window.audioManager) {
                window.audioManager.forceResumeAudio().then(() => {
                    audioButton.setText('√Çm thanh ƒë√£ b·∫≠t ‚úÖ');
                    audioButton.setStyle({ fill: '#00ff00' });
                }).catch(() => {
                    audioButton.setText('L·ªói √¢m thanh ‚ùå');
                    audioButton.setStyle({ fill: '#ff0000' });
                });
            }
        });
        
    }
    
    // H√†m di chuy·ªÉn l·ª±a ch·ªçn
    moveSelection(change) {
        this.selectedIndex += change;

        // Gi·ªõi h·∫°n index trong kho·∫£ng cho ph√©p
        if (this.selectedIndex < 0) {
            this.selectedIndex = this.options.length - 1;
        } else if (this.selectedIndex >= this.options.length) {
            this.selectedIndex = 0;
        }

        // C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa m≈©i t√™n
        this.arrow.y = 152 + this.selectedIndex * 20;

        // Update text colors to highlight selection
        this.textObjects.forEach((text, index) => {
            text.setStyle({ fill: index === this.selectedIndex ? '#ffffff' : '#ffda21' });
        });
    }

    // H√†m ch·ªçn m·ªôt l·ª±a ch·ªçn
    selectOption() {
        const selected = this.options[this.selectedIndex];
        
        if (selected.scene) {
            if (selected.text === 'B·∫Øt ƒê·∫ßu') {
                // T·∫°o ng∆∞·ªùi ch∆°i m·ªõi
                const player = new Player();
                player.dynamiteCount = 1;
                this.game.player = player;
                this.scene.start(selected.scene, { type: 'NextGoal', player: player });
            } else {
                // Handle other scenes like High Score
                this.scene.start(selected.scene, selected.data);
            }
        } else {
            // X·ª≠ l√Ω c√°c scene kh√°c
        }
    }
}